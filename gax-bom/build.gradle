plugins {
  id 'maven-publish'
  id 'signing'
}

archivesBaseName = 'gax-bom'

project.version = "2.18.7" // {x-version-update:gax-bom:current}

def mavenJavaDir = "$buildDir/publications/mavenJava"
def mavenJavaBomOutputFile = file(mavenJavaDir + '/pom-default.xml')
def mavenJavaBomAscOutputFile = file(mavenJavaDir + '/pom-default.xml.asc')

// Copy our pom.xml to the location where a generated POM would go
task copyPom() {
  doLast {
    new File(mavenJavaDir).mkdirs()
    copy {
      from 'pom.xml'
      into mavenJavaDir
      rename 'pom.xml', 'pom-default.xml'
    }
  }
}

// We want to use our own pom.xml instead of the generated one, so we disable
// the pom.xml generation and have the publish tasks depend on `copyPom` instead.
tasks.whenTaskAdded { task ->
  if (task.name == 'generatePomFileForMavenJavaPublication') {
    task.enabled = false
  } else if (task.name == 'publishMavenJavaPublicationToMavenLocal') {
    task.dependsOn copyPom
  } else if (task.name == 'publishMavenJavaPublicationToMavenRepository') {
    task.dependsOn copyPom
  } else if (task.name == 'publishMavenJavaPublicationToSonatypeRepository') {
    task.dependsOn copyPom
  }
}

// We can't use the `publishing` section from the main build.gradle because
// we don't want all the Java artifacts, and we want to use our own pom.xml
// instead of the generated one.
publishing {
  publications {
    mavenJava(MavenPublication) {
      version = project.version
      artifact mavenJavaBomOutputFile
    }
  }
  repositories {
    maven {
      url 'https://google.oss.sonatype.org/service/local/staging/deploy/maven2/'
      credentials {
        username = findProperty('ossrhUsername')
        password = findProperty('ossrhPassword')
      }
    }
  }
}

signing {
  required { gradle.taskGraph.hasTask ":${name}:publishToSonatype" }
  if (project.hasProperty('signing.gnupg.executable')) {
    useGpgCmd()
  }
  sign publishing.publications
}

// Unlike other regular subprojects, pom.asc (signature file) generated by
// signing is not automatically picked up. It may be because gax-bom uses a
// pre-written pom.xml instead of using an auto-generated one.
// https://discuss.gradle.org/t/how-to-publish-artifacts-signatures-asc-files-using-maven-publish-plugin/7422
task addPomAscFileToPublication {
  onlyIf { mavenJavaBomAscOutputFile.exists() }
  doLast {
    publishing.publications.mavenJava(MavenPublication) {
      artifact(mavenJavaBomAscOutputFile) { extension 'pom.asc' }
    }
  }
}
signMavenJavaPublication.finalizedBy addPomAscFileToPublication
