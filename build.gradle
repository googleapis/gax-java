import groovy.io.FileType

buildscript {
  repositories {
    mavenLocal()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "net.ltgt.gradle:gradle-apt-plugin:0.10",
      "com.github.jengelman.gradle.plugins:shadow:1.2.4",
      "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"

    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6"
  }
}

apply plugin: 'java'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: 'io.codearte.nexus-staging'

project.version = "1.33.1-SNAPSHOT" // {x-version-update:gax:current}

ext {
  grpcVersion = '1.13.1'
  commonProtosVersion = '1.12.0'
  authVersion = '0.11.0'
  // Project names not used for release
  nonReleaseProjects = ['benchmark']
  libraryVendor = 'Google'
}

googleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword') &&
    !nonReleaseProjects.contains(project.name)) {
  // Nexus staging plugin only works at root project level
  // See https://github.com/Codearte/gradle-nexus-staging-plugin/issues/47
  nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    packageGroup = "com.google.api"
  }
}

allprojects {
  // Formatting tasks
  // ================
  apply plugin: 'com.github.sherter.google-java-format'
  test.dependsOn verifyGoogleJavaFormat

  task verifyLicense {
    doLast {
      def licenseText = new File(rootProject.rootDir, 'license-header-javadoc.txt').text
      def srcFiles = []
      sourceSets
          .collectMany{it.allJava.getSrcDirs()}
          .grep{it.exists()}
          .each{it.eachFileRecurse(FileType.FILES, {srcFiles << new Tuple(it, it.text)})}
      srcFiles = srcFiles
          .findAll{it.get(0).path.endsWith(".java")}
          .collect{new Tuple(it.get(0), it.get(1).replaceAll("Copyright 20[0-9]{2}", "Copyright 20xx"))}
          .findAll{!it.get(1).startsWith(licenseText)}
      if (srcFiles.asList().size() > 0) {
        srcFiles.each({println 'missing license: ' + it.get(0)})
        throw new IllegalStateException("Above files do not have licenses")
      }
    }
  }
  test.dependsOn verifyLicense

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: "net.ltgt.apt"
  apply plugin: 'com.github.johnrengelman.shadow'

  group = "com.google.api"

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  // Dependencies
  // ------------

  ext {
    grpcVersion = grpcVersion
    commonProtosVersion = commonProtosVersion

    // Shortcuts for libraries we are using
    libraries = [
        grpcStub: "io.grpc:grpc-stub:${grpcVersion}",
        grpcAuth: "io.grpc:grpc-auth:${grpcVersion}",
        grpcProtobuf: "io.grpc:grpc-protobuf:${grpcVersion}",
        grpcNetty: "io.grpc:grpc-netty-shaded:${grpcVersion}",
        gson: "com.google.code.gson:gson:2.7",
        guava: 'com.google.guava:guava:20.0',
        jsr305: 'com.google.code.findbugs:jsr305:3.0.2',
        autovalue: 'com.google.auto.value:auto-value:1.4',
        threetenbp: 'org.threeten:threetenbp:1.3.3',
        httpClient: "com.google.http-client:google-http-client:1.24.1",
        auth: "com.google.auth:google-auth-library-oauth2-http:${authVersion}",
        authCredentials: "com.google.auth:google-auth-library-credentials:${authVersion}",
        commonProtos: "com.google.api.grpc:proto-google-common-protos:${commonProtosVersion}",
        apiCommon: "com.google.api:api-common:1.7.0",

        // Testing
        junit: 'junit:junit:4.12',
        mockito: 'org.mockito:mockito-core:2.21.0',
        powermockJunit: 'org.powermock:powermock-module-junit4:2.0.0-beta.5',
        powermockMockito: 'org.powermock:powermock-api-mockito2:2.0.0-beta.5',
        truth: 'com.google.truth:truth:0.42',
        commons: 'org.apache.commons:commons-lang3:3.4',
        commonProtosGrpc: "com.google.api.grpc:grpc-google-common-protos:${commonProtosVersion}",
    ]
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  configurations {
    shadowNoGuava
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled true
    }
    afterEvaluate {
      classDirectories = files(classDirectories.files.collect {
        fileTree(dir: it,
                 exclude: ['**/AutoValue_*'])
        })
    }
  }

  check.dependsOn jacocoTestReport

  // Source jar
  // ----------

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource, sourceSets.test.allSource
  }

  // JavaDoc
  // -------

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  javadoc.options {
    encoding = 'UTF-8'
    links 'https://docs.oracle.com/javase/7/docs/api/'

    if (JavaVersion.current().isJava8Compatible()) {
      addStringOption('Xdoclint:all,-missing', '-quiet')
    }
  }

  // Test jar
  // --------

  task testlibJar(type: Jar, dependsOn: test) {
    classifier = 'testlib'
    from sourceSets.test.output
  }

  // ShadowJar
  // ---------

  shadowJar {
    classifier = 'guavashaded'
    relocate 'com.google.common', 'com.google.api.gax.repackaged.com.google.common'
    relocate 'io.grpc.stub', 'com.google.api.gax.repackaged.io.grpc.stub'
    relocate 'io.grpc.protobuf', 'com.google.api.gax.repackaged.io.grpc.protobuf'
    configurations = [project.configurations.shadowNoGuava]
    exclude('io/grpc/*')
    exclude('io/grpc/internal/**')
    exclude('io/grpc/inprocess/**')
    exclude('io/grpc/util/**')
  }

  // Test Logging
  // ------------

  test {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat = 'full'
    }
  }


  // Eclipse Annotation Processing
  // -----------------------------

  ext {
    eclipseAptFolder = '.apt_generated'
    eclipseSettingsDir = file('.settings')
  }

  configurations {
    codeGeneration
    compile.exclude group: 'com.google.guava', module: 'guava-jdk5'
  }

  dependencies {
    codeGeneration libraries.autovalue, libraries.jsr305
  }

  compileJava.classpath += configurations.codeGeneration

  eclipse {
    jdt.file.withProperties {
      it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
    }
  }

  tasks.eclipseJdt {
    doFirst {
      def aptPrefs =
          file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
      aptPrefs.parentFile.mkdirs()

      aptPrefs.text = """\
          eclipse.preferences.version=1
          org.eclipse.jdt.apt.aptEnabled=true
          org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
          org.eclipse.jdt.apt.reconcileEnabled=true
          """.stripIndent()

      file('.factorypath').withWriter {
        new groovy.xml.MarkupBuilder(it).'factorypath' {
          project.configurations.codeGeneration.each { dep->
            factorypathentry(
              kind:'EXTJAR',
              id:dep.absolutePath,
              enabled:true,
              runInBatchMode:false)
          }
        }
      }
    }
  }

  tasks.cleanEclipseJdt {
    doFirst {
      delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
        file('.factorypath')
    }
  }

  // Publishing
  // ----------

  artifacts {
    archives javadocJar, sourcesJar, shadowJar, testlibJar
  }

  signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword') &&
      !nonReleaseProjects.contains(project.name)) {
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          pom.project {
            name 'GAX (Google Api eXtensions)'
            packaging 'jar'
            artifactId project.name
            description 'Google Api eXtensions'
            url 'https://github.com/googleapis'

            scm {
              url 'https://github.com/googleapis/gax-java'
              connection 'scm:git:https://github.com/googleapis/gax-java.git'
            }

            licenses {
              license {
                name 'BSD'
                url 'https://github.com/googleapis/gax-java/blob/master/LICENSE'
              }
            }

            developers {
              developer {
                id 'GoogleAPIs'
                name 'GoogleAPIs'
                email 'googleapis@googlegroups.com'
                url 'https://github.com/googleapis'
                organization 'Google, Inc.'
                organizationUrl 'https://www.google.com'
              }
            }
          }
        }
      }
    }
  } else if (!nonReleaseProjects.contains(project.name)) {
    task failUploadArchives {
      doLast {
        throw new GradleException("uploadArchives needs ossrhUsername and ossrhPassword "
          + "to be set. They can be set inside your ~/.gradle/gradle.properties file.")
      }
    }
    tasks.uploadArchives.dependsOn(failUploadArchives)
  }
}

// JavaDoc
// -------

task javadocCombined(type: Javadoc) {
  source subprojects.collect {project -> project.sourceSets.main.allJava }
  classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
  destinationDir = new File(projectDir, 'tmp_docs')
}

javadoc.options {
  encoding = 'UTF-8'
  links 'https://docs.oracle.com/javase/7/docs/api/'
}

clean {
  delete 'tmp_gh-pages/'
  delete 'tmp_docs/'
}

// Release
// =======

task checkOutGhPages {
  doLast {
    exec {
      commandLine 'git', 'clone', '--branch', 'gh-pages',
          '--single-branch', 'git@github.com:googleapis/gax-java.git', 'tmp_gh-pages'
    }
  }
}

task copyFilesToGhPages {
  dependsOn 'checkOutGhPages'
  dependsOn 'javadocCombined'
  doLast {
    def newSiteDirPath = 'tmp_gh-pages/' + project.version + '/apidocs/'
    new File(newSiteDirPath).mkdirs()
    copy {
      from 'tmp_docs'
      into newSiteDirPath
    }
    copy {
      from 'README.md'
      into 'tmp_gh-pages'
      rename { filename -> filename.replace 'README', 'index' }
    }
  }
}

task createApiDocsRedirect {
  dependsOn 'copyFilesToGhPages'
  doLast {
    def template = new File('templates/apidocs_index.html.template').text
    def outputContent = template.replace('{{siteVersion}}', project.version)
    new File('tmp_gh-pages/apidocs/index.html').write(outputContent)
  }
}

task publishDocs {
  dependsOn 'closeAndReleaseRepository'
  doLast {
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'add', '.'
    }
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'commit', '-m', 'Release docs for ' + project.version
    }
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'push'
    }
  }
}

// 1. Updates samples/pom.xml
// 2. Updates README.md
// 3. Regenerates the gh-pages branch under tmp_gh-pages
// 4. Stages the artifact on Sonatype
task stageRelease {
  dependsOn 'createApiDocsRedirect'
  doLast {
    exec {
      // We need to spawn a new gradle build process in order to upload appropriately
      // More details: http://stackoverflow.com/questions/31614735/gradle-uploadarchives-artificats-namespace-when-depending-on-a-plugin
      commandLine './gradlew', 'uploadArchives'
    }
  }
}

// 1. Closes and releases the artifact on Sonatype
// 2. Commits and pushes the new docs
// 3. Remove tmp_gh-pages
// Note: This task assumes that the 'stage_release' task has been completed.
task finalizeRelease {
  dependsOn 'publishDocs'
  doLast {
    exec {
      commandLine 'rm', '-r', 'tmp_gh-pages'
    }
  }
}
